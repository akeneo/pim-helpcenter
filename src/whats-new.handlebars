{{!-- The index of the what's new by version page --}}
{{#> layout title="Discover the new key features we released in our versions"}}
{{> navbar-only-logo }}
{{> updates-button}}
    <div id="whats-new" class="container whats-new" data-init-versions="{{defaultVersions}}" data-init-areas="{{defaultAreas}}">
        <div class="row">
            <div class="col-xs-12">
                <p class="breadcrumb text-muted"><a href="/">Home</a> / <a href="/pim/v7">PIM help center</a> / Discover the key features released in our versions</p>
                <h1>Discover the key features released in our versions</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-md-9">
                <h3>PIM versions</h3>
                {{#each versions as |version key|}}
                    <label class="version-checkbox">
                        <input id=".{{key}}" onclick="filterVersions('.{{key}}', this)" type="checkbox" value=".{{key}}" />
                        <span class="label label-default whats-new-updates-label {{#if isSupported}} label-supported-version{{/if}}">{{name}}</span>
                    </label>
                {{/each}}
                <p class="small"><em>Versions are ranked from the oldest to the latest. Don't hesitate to migrate to newer versions to benefit from the features listed below!</em><br/><em class="label-supported-version">Currently supported versions if you are an Enterprise or Growth user.</em></p>
            </div>
            <div class="col-xs-12 col-md-3">
                <h3>PIM edition</h3>
                <label class="edition-radio">
                    <input id=".CE" onclick="filterEdition('.CE')" name="editionFilter" type="radio"/>
                    <span class="label label-default whats-new-updates-label">Community</span>
                </label>
                <label class="edition-radio">
                    <input id=".GE" onclick="filterEdition('.GE')" name="editionFilter" type="radio" />
                    <span class="label label-default whats-new-updates-label">Growth</span>
                </label>
                <label class="edition-radio">
                    <input id=".EE" onclick="filterEdition('.EE')" name="editionFilter" type="radio" />
                    <span class="label label-default whats-new-updates-label">Enterprise</span>
                </label>
            </div>
            <div class="col-xs-12">
                <h3>PXM areas</h3>
                {{#each areas as |area key|}}
                    <label class="area-checkbox">
                        <input id=".{{key}}" onclick="filterAreas('.{{key}}', this)" type="checkbox" value=".{{key}}" />
                        <span class="label label-{{area.color}} whats-new-updates-label">{{area.label}}</span>
                    </label>
                {{/each}}
            </div>
        </div>
        <div class="row whats-new-results">
            <div class="col-xs-12">
                <p id="news-count"></p>
            </div>
            <div class="col-xs-12">
                <div class="grid">
                    {{#each updates as |update id|}}
                        <div class="whats-new-updates {{version}} {{#each areaCodes as |area|}}{{area}} {{/each}} {{#each editions as |edition|}}{{edition}} {{/each}}" data-version="{{version}}" data-order="{{order}}">
                            <p class="title">{{title}}</p>
                            <p><em>Available {{#if isSerenityOnly}} in <b>Serenity</b> {{#each editions as |edition|}} {{#if @last}}{{#unless @first}} & {{/unless}}{{/if}}{{edition}}{{/each}}{{else}} since <b>{{since-version}}</b> in {{#each editions as |edition|}} {{#if @last}}{{#unless @first}} & {{/unless}}{{/if}}{{edition}}{{/each}}{{/if}}</em>
                            <p>{{#each coloredAreas as |area color|}}<span class="label label-{{color}} whats-new-updates-label">{{area}}</span> {{/each}}</p>
                            {{#if link}}<p class="text-right"><a class="link" href="{{link}}" target="_blank">Read more... ></a></p>{{/if}}
                        </div>
                    {{/each}}
                </div>
            </div>
        </div>
    </div>
<script type="text/javascript">
    // Init the news grid. They will be sorted by versions in descending order
    var $grid = $('.grid').isotope({itemSelector: '.whats-new-updates',layoutMode: 'fitRows',getSortData: {version: '[data-version]', order:'[data-order] parseInt'},sortBy: ['version','order'],sortAscending: false});
    // Get the available list of versions and areas/features
    var versions = _.map(document.getElementById('whats-new').dataset.initVersions.split(','), function(version){return '.' + version});
    var areas = _.map(document.getElementById('whats-new').dataset.initAreas.split(','), function(area){return '.' + area});
    // By default, we select the following filters: all versions, the Enterprise Edition and all area/features
    var checkedVersions = _.takeRight([...versions],2);
    var checkedEdition = '.EE';
    var checkedAreas = [...areas];
    // Only in the case there is no hash in the URL, we set up the hash to take into account the default filters set above.
    if(!getHashVersions() && !getHashEdition() && !getHashAreas()){
       setHash();
    }
    // Watch the changes in the URL hash to update the news grid and the selected filters accordingly
    $(window).on('hashchange',onHashchange);
    // Trigger a hash change to compute the right filters based on the current hashed url
    onHashchange();

    function getHashVersions() {
        var matches = location.hash.match(/versions=([^&]+)&edition=.*&domains=.*/i);
        var hashVersions = matches && matches[1];
        return hashVersions && decodeURIComponent(hashVersions);
    }
    function getHashEdition() {
        var matches = location.hash.match(/versions=.*&edition=([^&]+)&domains=.*/i);
        var hashEdition = matches && matches[1];
        return hashEdition && decodeURIComponent(hashEdition);
    }
    function getHashAreas() {
        var matches = location.hash.match(/versions=.*&edition=.*&domains=([^&]+)/i);
        var hashAreas = matches && matches[1];
        return hashAreas && decodeURIComponent(hashAreas);
    }
    function setHash(){
        location.hash = 'versions=' + encodeURIComponent(checkedVersions) + '&edition=' + encodeURIComponent(checkedEdition) + '&domains=' + encodeURIComponent(checkedAreas);
    }

    function onHashchange() {
        // Get the versions, edition and areas/features set in the URL hash and set the checked versions accordingly
        var hashVersions = getHashVersions();
        checkedVersions = hashVersions ? hashVersions.split(',') : ['.none'];
        checkedEdition = getHashEdition();
        var hashAreas = getHashAreas();
        checkedAreas = hashAreas ? hashAreas.split(',') : ['.none'];

        // Filter the news in the grid depending on the checked filters
        $grid.isotope({ filter: computeFilters() });
        // Set the number of news displayed in the grid
        countNews();

        // Check the right version checkboxes, edition radio button and area checkboxes according to the URL hash
        document.getElementById(checkedEdition).checked = true;
        _.each(versions,function(version){
            var checked = _.find(checkedVersions, function(checkedVersion) { return checkedVersion === version; }) ? true : false;
            document.getElementById(version).checked = checked;
        });
        _.each(areas,function(area){
            var checked = _.find(checkedAreas, function(checkedArea) { return checkedArea === area; }) ? true : false;
            document.getElementById(area).checked = checked;
        });

        disableGEWhenSerenityNotSelected();
        disableCEWhenOnlySerenitySelected();
    }

    function countNews(){
        var newsCount = $grid.data('isotope').filteredItems.length;
        if(checkedVersions.length === 1 && checkedVersions.includes('.serenity')){
            document.getElementById('news-count').innerHTML = newsCount ? 'Here are the <b class="counter">' + newsCount + '</b> exclusive key features delivered in the Serenity PIM, for the edition and areas you selected. ðŸ’ª Note that, as a Serenity customer, you also benefit from all the features delivered in the past, in our previous versions. Select our older versions to check them out! ðŸ˜‰' :  'Uh oh! There were no features delivered in the Serenity PIM, for the edition and areas you selected.<br/><b>Don\'t hesitate to play around with the filters to see more features!</b> ðŸ˜‰';

        } else {
            document.getElementById('news-count').innerHTML = newsCount ? 'Here are the <b class="counter">' + newsCount + '</b> key features delivered in the PIM for the versions, edition and areas you selected. ðŸ’ª' :  'Uh oh! There were no features delivered in the PIM for the versions, edition and areas you selected.<br/><b>Don\'t hesitate to play around with the filters to see more features!</b> ðŸ˜‰';
        }
    }

    function filterVersions(version, elm) {
        // Each time a version checkbox is clicked, we update the checked versions accordingly
         _.pull(checkedVersions, '.none');
        elm.checked ? checkedVersions.push(version) : _.pull(checkedVersions, version);
        if(checkedVersions.length === 0){
            checkedVersions.push('.none');
        }
        disableGEWhenSerenityNotSelected();
        disableCEWhenOnlySerenitySelected();

        // And we update both URL and the news grid accordingly
        updateHashAndRedrawGrid();
    }

    function filterEdition(edition) {
        checkedEdition = edition;
        // And we update both URL and the news grid accordingly
        updateHashAndRedrawGrid();
    }

    function filterAreas(area, elm) {
         _.pull(checkedAreas, '.none');
        elm.checked ? checkedAreas.push(area) : _.pull(checkedAreas, area);
        if(checkedAreas.length === 0){
            checkedAreas.push('.none');
        }
        // And we update both URL and the news grid accordingly
        updateHashAndRedrawGrid();
    }

    function updateHashAndRedrawGrid(){
        // Update the URL hash to reflect the checked filters
        setHash();
        // Filter the news in the grid depending on the checked filters
        $grid.isotope({ filter: computeFilters() });
        // Set the number of news displayed in the grid
        countNews();
    }

    function computeFilters() {
        // Construct the string needed for the grid to be filtered properly according to the checked versions, edition and areas/features
        var combinationOfVersionsAreas = [];
        _.each(checkedAreas, function(area){
            _.each(checkedVersions, function(version){
                combinationOfVersionsAreas.push(area + version);
            });
        });
        return combinationOfVersionsAreas.join(checkedEdition + ', ') + checkedEdition;
    }

    function disableGEWhenSerenityNotSelected(){
        // GE only exists in Serenity version, so we disable GE whenever Serenity is not in the selected version
        if(!checkedVersions.includes('.serenity')){
            document.getElementById('.GE').disabled = true;
            if(checkedEdition === '.GE'){
                filterEdition('.CE');
            }
        } else {
            document.getElementById('.GE').disabled = false;
        }
    }
    function disableCEWhenOnlySerenitySelected(){
        // Serenity CE doesn't exist, so we disable CE whenever the only selected version is Serenity
        if(checkedVersions.length === 1 && checkedVersions.includes('.serenity')){
            document.getElementById('.CE').disabled = true;
            if(checkedEdition === '.CE'){
                filterEdition('.GE');
            }
        } else {
            document.getElementById('.CE').disabled = false;
        }
    }

</script>
{{/layout}}
